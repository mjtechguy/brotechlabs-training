# Part 9: Application Hosting

## Prerequisites

Before starting this section, you should understand:
- Basic web server configuration (Nginx/Apache)
- Process management with systemctl
- Environment variables and configuration files
- Basic networking concepts (ports, firewall)
- Package management with APT

**Learning Resources:**
- [Node.js Documentation](https://nodejs.org/en/docs/)
- [Python Web Deployment](https://docs.python.org/3/howto/webservers.html)
- [PHP Documentation](https://www.php.net/docs.php)
- [Git Documentation](https://git-scm.com/doc)

---

## Chapter 20: Running Applications

### Introduction to Application Hosting

Running applications on Ubuntu Server involves:
- Installing runtime environments (Python, Node.js, PHP)
- Configuring applications for production
- Managing application processes
- Handling logs and monitoring
- Ensuring security and resource isolation

### Python Applications

#### Setting Up Python Environment

`python3 --version` {{ execute }}

`sudo apt update` {{ execute }}

`sudo apt install python3-pip python3-venv python3-dev build-essential -y` {{ execute }}

`sudo apt install python3-setuptools python3-wheel -y` {{ execute }}

`python3 -m pip install --upgrade pip` {{ execute }}

#### Virtual Environments

Virtual environments isolate Python dependencies per application.

`sudo mkdir -p /var/www/python-app` {{ execute }}

`sudo chown $USER:$USER /var/www/python-app` {{ execute }}

`cd /var/www/python-app` {{ execute }}

`python3 -m venv venv` {{ execute }}

`source venv/bin/activate` {{ execute }}

`Your prompt changes to show (venv)` {{ info }}

`pip install flask gunicorn requests` {{ execute }}

`pip freeze > requirements.txt` {{ execute }}

`deactivate` {{ execute }}

#### Flask Application Example

`nano /var/www/python-app/app.py` {{ execute }}

```python{{ copy }}
from flask import Flask, jsonify, request
import os
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Create Flask app
app = Flask(__name__)

# Configuration from environment
app.config['DEBUG'] = os.environ.get('FLASK_DEBUG', 'False').lower() == 'true'
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key')

@app.route('/')
def index():
    logger.info('Index page accessed')
    return jsonify({
        'message': 'Hello from Flask!',
        'timestamp': datetime.now().isoformat(),
        'environment': os.environ.get('FLASK_ENV', 'production')
    })

@app.route('/health')
def health():
    return jsonify({'status': 'healthy'}), 200

@app.route('/api/echo', methods=['POST'])
def echo():
    data = request.get_json()
    logger.info(f'Echo endpoint called with: {data}')
    return jsonify({'echo': data}), 200

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Not found'}), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f'Internal error: {error}')
    return jsonify({'error': 'Internal server error'}), 500

if __name__ == '__main__':
    # Development server (not for production!)
    app.run(host='0.0.0.0', port=5000)
```

#### WSGI Configuration with Gunicorn

`cd /var/www/python-app` {{ execute }}

`source venv/bin/activate` {{ execute }}

`pip install gunicorn` {{ execute }}

`nano /var/www/python-app/gunicorn_config.py` {{ execute }}

```python{{ copy }}
import multiprocessing
import os

# Server socket
bind = "127.0.0.1:5000"
backlog = 2048

# Worker processes
workers = multiprocessing.cpu_count() * 2 + 1
worker_class = 'sync'
worker_connections = 1000
timeout = 30
keepalive = 2

# Restart workers after this many requests
max_requests = 1000
max_requests_jitter = 50

# Logging
accesslog = '/var/log/python-app/access.log'
errorlog = '/var/log/python-app/error.log'
loglevel = 'info'
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Process naming
proc_name = 'python-app'

# Server mechanics
daemon = False
pidfile = '/var/run/python-app.pid'
user = 'www-data'
group = 'www-data'
tmp_upload_dir = None
```

`sudo mkdir -p /var/log/python-app` {{ execute }}

`sudo chown www-data:www-data /var/log/python-app` {{ execute }}

`gunicorn --config gunicorn_config.py app:app` {{ copy }}

#### Django Application Setup

`cd /var/www` {{ copy }}

`django-admin startproject django_app` {{ copy }}

`cd django_app` {{ copy }}

`pip install django gunicorn psycopg2-binary python-decouple` {{ copy }}

`nano django_app/settings.py` {{ copy }}

```python{{ copy }}
# Production settings
from decouple import config

DEBUG = config('DEBUG', default=False, cast=bool)
SECRET_KEY = config('SECRET_KEY')
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=lambda v: [s.strip() for s in v.split(',')])

# Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
    }
}

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = '/var/www/django_app/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = '/var/www/django_app/media/'
```

`nano /var/www/django_app/.env` {{ copy }}

```env{{ copy }}
SECRET_KEY=your-secret-key-here
DEBUG=False
ALLOWED_HOSTS=example.com,www.example.com
DB_NAME=django_db
DB_USER=django_user
DB_PASSWORD=secure_password
DB_HOST=localhost
DB_PORT=5432
```

`python manage.py migrate` {{ copy }}

`python manage.py collectstatic --noinput` {{ copy }}

`python manage.py createsuperuser` {{ copy }}

### Node.js Applications

#### Installing Node.js

`curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -` {{ copy }}

`sudo apt install nodejs -y` {{ execute }}

`Alternative: sudo snap install node --classic` {{ info }}

`node --version` {{ execute }}

`npm --version` {{ execute }}

`sudo apt install build-essential -y` {{ execute }}

`sudo npm install -g pm2` {{ execute }}

#### Express.js Application

`sudo mkdir -p /var/www/node-app` {{ execute }}

`sudo chown $USER:$USER /var/www/node-app` {{ execute }}

`cd /var/www/node-app` {{ execute }}

`npm init -y` {{ execute }}

`npm install express helmet cors dotenv winston express-rate-limit` {{ execute }}

`nano app.js` {{ execute }}

```javascript{{ copy }}
const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const winston = require('winston');
require('dotenv').config();

// Configure logger
const logger = winston.createLogger({
    level: process.env.LOG_LEVEL || 'info',
    format: winston.format.json(),
    transports: [
        new winston.transports.File({ filename: '/var/log/node-app/error.log', level: 'error' }),
        new winston.transports.File({ filename: '/var/log/node-app/combined.log' }),
        new winston.transports.Console({
            format: winston.format.simple()
        })
    ]
});

// Create Express app
const app = express();
const PORT = process.env.PORT || 3000;

// Security middleware
app.use(helmet());
app.use(cors());

// Rate limiting
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100 // limit each IP to 100 requests per windowMs
});
app.use('/api/', limiter);

// Body parsing
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Request logging
app.use((req, res, next) => {
    logger.info(`${req.method} ${req.path} - ${req.ip}`);
    next();
});

// Routes
app.get('/', (req, res) => {
    res.json({
        message: 'Node.js app running!',
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'production'
    });
});

app.get('/health', (req, res) => {
    res.status(200).json({ status: 'healthy' });
});

app.get('/api/info', (req, res) => {
    res.json({
        node_version: process.version,
        memory: process.memoryUsage(),
        uptime: process.uptime()
    });
});

// Error handling
app.use((err, req, res, next) => {
    logger.error(err.stack);
    res.status(500).json({ error: 'Something went wrong!' });
});

// 404 handler
app.use((req, res) => {
    res.status(404).json({ error: 'Not found' });
});

// Start server
app.listen(PORT, () => {
    logger.info(`Server running on port ${PORT}`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    logger.info('SIGTERM received, closing server...');
    server.close(() => {
        logger.info('Server closed');
        process.exit(0);
    });
});
```

`nano .env` {{ execute }}

```env{{ copy }}
NODE_ENV=production
PORT=3000
LOG_LEVEL=info
```

`sudo mkdir -p /var/log/node-app` {{ execute }}

`sudo chown $USER:$USER /var/log/node-app` {{ execute }}

#### PM2 Process Management

`pm2 start app.js --name node-app` {{ copy }}

`nano ecosystem.config.js` {{ execute }}

```javascript{{ copy }}
module.exports = {
    apps: [{
        name: 'node-app',
        script: './app.js',
        instances: 'max',
        exec_mode: 'cluster',
        env: {
            NODE_ENV: 'production',
            PORT: 3000
        },
        error_file: '/var/log/node-app/pm2-error.log',
        out_file: '/var/log/node-app/pm2-out.log',
        log_file: '/var/log/node-app/pm2-combined.log',
        time: true,
        max_memory_restart: '1G',
        max_restarts: 10,
        min_uptime: '10s',
        watch: false,
        ignore_watch: ['node_modules', 'logs'],
        wait_ready: true,
        listen_timeout: 3000,
        kill_timeout: 5000
    }]
};
```

`pm2 start ecosystem.config.js` {{ execute }}

`pm2 list` {{ execute }}

`pm2 show node-app` {{ execute }}

`pm2 logs node-app` {{ execute }}

`pm2 monit` {{ execute }}

`pm2 restart node-app` {{ execute }}

`pm2 reload node-app` {{ copy }}

`pm2 stop node-app` {{ copy }}

`pm2 delete node-app` {{ copy }}

`pm2 save` {{ execute }}

`pm2 startup systemd` {{ execute }}

`Follow the command it outputs` {{ info }}

### PHP Applications

#### PHP Installation and Configuration

`sudo apt update` {{ execute }}

`sudo apt install php8.1 php8.1-fpm php8.1-mysql php8.1-xml php8.1-mbstring php8.1-curl php8.1-gd php8.1-zip php8.1-bcmath php8.1-intl php8.1-opcache php8.1-readline php8.1-cli -y` {{ execute }}

`php -v` {{ execute }}

`sudo nano /etc/php/8.1/fpm/php.ini` {{ execute }}

```ini{{ copy }}
; Important production settings
expose_php = Off
max_execution_time = 30
max_input_time = 60
memory_limit = 256M
error_reporting = E_ALL & ~E_DEPRECATED & ~E_STRICT
display_errors = Off
display_startup_errors = Off
log_errors = On
error_log = /var/log/php/error.log
post_max_size = 20M
upload_max_filesize = 20M
max_file_uploads = 20
date.timezone = America/New_York

; OPcache settings
opcache.enable=1
opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=2
opcache.fast_shutdown=1
```

`sudo nano /etc/php/8.1/fpm/pool.d/www.conf` {{ execute }}

```ini{{ copy }}
[www]
user = www-data
group = www-data
listen = /run/php/php8.1-fpm.sock
listen.owner = www-data
listen.group = www-data
listen.mode = 0660

; Process management
pm = dynamic
pm.max_children = 50
pm.start_servers = 5
pm.min_spare_servers = 5
pm.max_spare_servers = 35
pm.process_idle_timeout = 10s
pm.max_requests = 500

; Logging
access.log = /var/log/php/access.log
slowlog = /var/log/php/slow.log
request_slowlog_timeout = 5s

; Environment variables
env[HOSTNAME] = $HOSTNAME
env[PATH] = /usr/local/bin:/usr/bin:/bin
env[TMP] = /tmp
env[TEMP] = /tmp
```

`sudo mkdir -p /var/log/php` {{ execute }}

`sudo chown www-data:www-data /var/log/php` {{ execute }}

`sudo systemctl restart php8.1-fpm` {{ execute }}

`sudo systemctl enable php8.1-fpm` {{ execute }}

#### Laravel Application

`curl -sS https://getcomposer.org/installer | php` {{ copy }}

`sudo mv composer.phar /usr/local/bin/composer` {{ execute }}

`sudo chmod +x /usr/local/bin/composer` {{ execute }}

`cd /var/www` {{ copy }}

`composer create-project laravel/laravel laravel-app` {{ copy }}

`cd laravel-app` {{ copy }}

`sudo chown -R www-data:www-data storage bootstrap/cache` {{ execute }}

`sudo chmod -R 775 storage bootstrap/cache` {{ execute }}

`cp .env.example .env` {{ execute }}

`nano .env` {{ execute }}

```env{{ copy }}
APP_NAME="Laravel App"
APP_ENV=production
APP_KEY=base64:your-generated-key
APP_DEBUG=false
APP_URL=https://example.com

LOG_CHANNEL=daily
LOG_LEVEL=error

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel_db
DB_USERNAME=laravel_user
DB_PASSWORD=secure_password

CACHE_DRIVER=redis
SESSION_DRIVER=redis
QUEUE_CONNECTION=redis

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379
```

`php artisan key:generate` {{ execute }}

`php artisan migrate` {{ execute }}

`php artisan config:cache` {{ execute }}

`php artisan route:cache` {{ execute }}

`php artisan view:cache` {{ execute }}

`php artisan optimize` {{ execute }}

### Application Deployment Strategies

#### Zero-Downtime Deployment

`nano /usr/local/bin/deploy-app.sh` {{ copy }}

```bash{{ copy }}
#!/bin/bash
# Zero-downtime deployment script

APP_DIR="/var/www/app"
DEPLOY_DIR="/var/www/deployments"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
NEW_RELEASE="$DEPLOY_DIR/$TIMESTAMP"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
    exit 1
}

# Create new release directory
log "Creating release directory: $NEW_RELEASE"
mkdir -p "$NEW_RELEASE" || error "Failed to create release directory"

# Clone/copy application code
log "Deploying application code..."
git clone https://github.com/user/app.git "$NEW_RELEASE" || error "Failed to clone repository"

# Install dependencies
cd "$NEW_RELEASE"

if [ -f "package.json" ]; then
    log "Installing Node.js dependencies..."
    npm ci --production || error "Failed to install npm dependencies"
fi

if [ -f "requirements.txt" ]; then
    log "Installing Python dependencies..."
    python3 -m venv venv
    source venv/bin/activate
    pip install -r requirements.txt || error "Failed to install Python dependencies"
fi

if [ -f "composer.json" ]; then
    log "Installing PHP dependencies..."
    composer install --no-dev --optimize-autoloader || error "Failed to install Composer dependencies"
fi

# Copy shared files (uploads, configs, etc.)
log "Linking shared resources..."
ln -nfs /var/www/shared/uploads "$NEW_RELEASE/uploads"
ln -nfs /var/www/shared/.env "$NEW_RELEASE/.env"

# Run tests
log "Running tests..."
if [ -f "test.sh" ]; then
    ./test.sh || error "Tests failed"
fi

# Build assets
if [ -f "webpack.config.js" ]; then
    log "Building assets..."
    npm run build || error "Failed to build assets"
fi

# Update symlink (atomic operation)
log "Switching to new release..."
ln -nfs "$NEW_RELEASE" "$APP_DIR.new"
mv -Tf "$APP_DIR.new" "$APP_DIR"

# Reload application
log "Reloading application..."
if [ -f "$APP_DIR/ecosystem.config.js" ]; then
    pm2 reload ecosystem.config.js
elif [ -f "/etc/systemd/system/app.service" ]; then
    sudo systemctl reload app
else
    sudo systemctl reload php8.1-fpm
    sudo systemctl reload nginx
fi

# Clean up old releases (keep last 5)
log "Cleaning up old releases..."
cd "$DEPLOY_DIR"
ls -t | tail -n +6 | xargs rm -rf

log "Deployment completed successfully!"
```

### Process Management with Systemd

#### Creating Systemd Service for Python App

`sudo nano /etc/systemd/system/python-app.service` {{ execute }}

```ini{{ copy }}
[Unit]
Description=Python Flask Application
After=network.target mysql.service
Wants=mysql.service

[Service]
Type=notify
User=www-data
Group=www-data
RuntimeDirectory=python-app
WorkingDirectory=/var/www/python-app
Environment="PATH=/var/www/python-app/venv/bin"
Environment="FLASK_ENV=production"
ExecStart=/var/www/python-app/venv/bin/gunicorn \
    --workers 3 \
    --bind unix:/run/python-app/app.sock \
    --access-logfile /var/log/python-app/access.log \
    --error-logfile /var/log/python-app/error.log \
    app:app
ExecReload=/bin/kill -s HUP $MAINPID
KillMode=mixed
KillSignal=SIGQUIT
TimeoutStopSec=5
Restart=always
RestartSec=10

# Security
NoNewPrivileges=true
PrivateTmp=true
ProtectHome=true
ProtectSystem=strict
ReadWritePaths=/var/www/python-app /var/log/python-app

[Install]
WantedBy=multi-user.target
```

#### Node.js Systemd Service

`sudo nano /etc/systemd/system/node-app.service` {{ execute }}

```ini{{ copy }}
[Unit]
Description=Node.js Express Application
After=network.target
Wants=redis.service mysql.service

[Service]
Type=simple
User=nodejs
Group=nodejs
WorkingDirectory=/var/www/node-app
Environment=NODE_ENV=production
Environment=PORT=3000
ExecStart=/usr/bin/node app.js
Restart=always
RestartSec=10

# Output to journal
StandardOutput=journal
StandardError=journal
SyslogIdentifier=node-app

# Resource limits
LimitNOFILE=65536
MemoryLimit=512M
CPUQuota=80%

# Security
NoNewPrivileges=true
PrivateTmp=true
ProtectHome=true
ProtectSystem=full

[Install]
WantedBy=multi-user.target
```

`sudo systemctl daemon-reload` {{ execute }}

`sudo systemctl enable python-app` {{ execute }}

`sudo systemctl start python-app` {{ execute }}

`sudo systemctl enable node-app` {{ execute }}

`sudo systemctl start node-app` {{ execute }}

`sudo systemctl status python-app` {{ execute }}

`sudo systemctl status node-app` {{ execute }}

`journalctl -u python-app -f` {{ copy }}

`journalctl -u node-app -f` {{ copy }}

### Application Logging

#### Centralized Logging Setup

`sudo nano /etc/rsyslog.d/apps.conf` {{ execute }}

```conf{{ copy }}
# Python application logs
:programname, isequal, "python-app" /var/log/apps/python-app.log
& stop

# Node.js application logs
:programname, isequal, "node-app" /var/log/apps/node-app.log
& stop

# PHP application logs
:programname, isequal, "php-app" /var/log/apps/php-app.log
& stop
```

`sudo mkdir -p /var/log/apps` {{ execute }}

`sudo chmod 755 /var/log/apps` {{ execute }}

`sudo systemctl restart rsyslog` {{ execute }}

#### Log Rotation Configuration

`sudo nano /etc/logrotate.d/applications` {{ execute }}

```conf{{ copy }}
/var/log/apps/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    create 0644 www-data www-data
    sharedscripts
    postrotate
        systemctl reload rsyslog > /dev/null 2>&1 || true
    endscript
}

/var/log/python-app/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    create 0644 www-data www-data
    sharedscripts
    postrotate
        systemctl reload python-app > /dev/null 2>&1 || true
    endscript
}

/var/log/node-app/*.log {
    daily
    missingok
    rotate 14
    compress
    delaycompress
    notifempty
    create 0644 nodejs nodejs
    sharedscripts
    postrotate
        pm2 reloadLogs > /dev/null 2>&1 || true
    endscript
}
```

### Resource Isolation

#### Using Cgroups for Resource Limits

`sudo nano /etc/systemd/system/app-limited.service` {{ copy }}

```ini{{ copy }}
[Unit]
Description=Resource-Limited Application

[Service]
Type=simple
User=appuser
Group=appuser

# CPU limits
CPUQuota=50%
CPUWeight=50

# Memory limits
MemoryMax=512M
MemorySwapMax=0

# I/O limits
IOWeight=50
IOReadBandwidthMax=/dev/sda 10M
IOWriteBandwidthMax=/dev/sda 10M

# Task limits
TasksMax=100

ExecStart=/usr/bin/node /var/www/app/app.js

[Install]
WantedBy=multi-user.target
```

#### Using systemd-run for Temporary Limits

`systemd-run --uid=www-data --gid=www-data --property=MemoryMax=256M --property=CPUQuota=25% --property=IOWeight=10 /usr/bin/python3 /var/www/scripts/intensive-task.py` {{ copy }}

`systemd-run --on-active=30s --timer-property=AccuracySec=1s /usr/local/bin/cleanup-script.sh` {{ copy }}

### Application Monitoring

#### Health Check Scripts

`sudo nano /usr/local/bin/check-apps.sh` {{ copy }}

```bash{{ copy }}
#!/bin/bash
# Application health check script

ALERT_EMAIL="admin@example.com"
LOG_FILE="/var/log/app-health.log"

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

check_http_endpoint() {
    local app_name=$1
    local url=$2
    local expected_status=${3:-200}

    status=$(curl -s -o /dev/null -w "%{http_code}" "$url")

    if [ "$status" -eq "$expected_status" ]; then
        log "✓ $app_name is healthy (HTTP $status)"
        return 0
    else
        log "✗ $app_name is unhealthy (HTTP $status, expected $expected_status)"
        echo "$app_name health check failed" | mail -s "App Alert: $app_name" "$ALERT_EMAIL"
        return 1
    fi
}

check_process() {
    local app_name=$1
    local process_name=$2

    if pgrep -f "$process_name" > /dev/null; then
        log "✓ $app_name process is running"
        return 0
    else
        log "✗ $app_name process is not running"

        # Attempt restart
        systemctl restart "$app_name"
        sleep 5

        if pgrep -f "$process_name" > /dev/null; then
            log "✓ $app_name restarted successfully"
        else
            log "✗ Failed to restart $app_name"
            echo "$app_name failed to restart" | mail -s "Critical: $app_name Down" "$ALERT_EMAIL"
        fi
        return 1
    fi
}

check_port() {
    local app_name=$1
    local port=$2

    if nc -z localhost "$port"; then
        log "✓ $app_name port $port is open"
        return 0
    else
        log "✗ $app_name port $port is closed"
        return 1
    fi
}

# Main checks
log "Starting application health checks"

# Check Python app
check_http_endpoint "Python Flask" "http://localhost:5000/health" 200
check_process "python-app" "gunicorn"

# Check Node.js app
check_http_endpoint "Node Express" "http://localhost:3000/health" 200
check_port "Node.js" 3000

# Check PHP app
check_http_endpoint "PHP App" "http://localhost/health.php" 200
check_process "php-fpm" "php-fpm8.1"

log "Health checks completed"
```

`sudo chmod +x /usr/local/bin/check-apps.sh` {{ execute }}

`sudo crontab -e` {{ copy }}

`Add: */5 * * * * /usr/local/bin/check-apps.sh` {{ info }}

### Troubleshooting Applications

#### Common Issues and Solutions

`sudo nano /usr/local/bin/debug-app.sh` {{ copy }}

```bash{{ copy }}
#!/bin/bash
# Application debugging script

APP_TYPE=$1
APP_NAME=$2

debug_python() {
    echo "=== Python App Debug ==="

    # Check Python version
    python3 --version

    # Check virtual environment
    if [ -d "/var/www/$APP_NAME/venv" ]; then
        source "/var/www/$APP_NAME/venv/bin/activate"
        pip list
        deactivate
    fi

    # Check service status
    systemctl status "$APP_NAME"

    # Check recent logs
    journalctl -u "$APP_NAME" -n 50

    # Check port binding
    sudo ss -tlnp | grep python

    # Memory usage
    ps aux | grep -E "python|gunicorn" | grep -v grep
}

debug_nodejs() {
    echo "=== Node.js App Debug ==="

    # Check Node version
    node --version
    npm --version

    # Check PM2 status
    pm2 list
    pm2 show "$APP_NAME"

    # Check logs
    pm2 logs "$APP_NAME" --lines 50

    # Check port binding
    sudo ss -tlnp | grep node

    # Memory usage
    ps aux | grep node | grep -v grep
}

debug_php() {
    echo "=== PHP App Debug ==="

    # Check PHP version
    php -v

    # Check PHP-FPM status
    systemctl status php8.1-fpm

    # Check PHP-FPM pool
    sudo php-fpm8.1 -tt

    # Check error logs
    tail -50 /var/log/php/error.log

    # Check OPcache status
    php -r "var_dump(opcache_get_status());"

    # Check loaded extensions
    php -m
}

case "$APP_TYPE" in
    python)
        debug_python
        ;;
    node)
        debug_nodejs
        ;;
    php)
        debug_php
        ;;
    *)
        echo "Usage: $0 {python|node|php} app_name"
        exit 1
        ;;
esac
```

---

## Chapter 21: Local Development Environment

### Setting Up Development Tools

#### Essential Development Packages

`sudo apt update` {{ execute }}

`sudo apt install -y build-essential curl wget git vim nano htop tree jq unzip software-properties-common apt-transport-https ca-certificates gnupg lsb-release` {{ execute }}

`sudo apt install -y libssl-dev libffi-dev libxml2-dev libxslt1-dev libpq-dev libmysqlclient-dev libsqlite3-dev libcurl4-openssl-dev libjpeg-dev libpng-dev libfreetype6-dev` {{ execute }}

#### Code Editors Setup

`curl -fsSL https://code-server.dev/install.sh | sh` {{ copy }}

`sudo nano ~/.config/code-server/config.yaml` {{ copy }}

```yaml{{ copy }}
bind-addr: 127.0.0.1:8080
auth: password
password: your-secure-password
cert: false
```

`systemctl --user enable --now code-server` {{ execute }}

`Alternative: curl https://getmic.ro | bash` {{ info }}

`sudo mv micro /usr/local/bin/` {{ copy }}

`Or install neovim: sudo apt install neovim -y` {{ info }}

### Version Control with Git

#### Git Installation and Configuration

`sudo apt install git -y` {{ execute }}

`git config --global user.name "Your Name"` {{ copy }}

`git config --global user.email "your.email@example.com"` {{ copy }}

`git config --global core.editor "nano"` {{ execute }}

`git config --global init.defaultBranch main` {{ execute }}

`git config --global alias.co checkout` {{ execute }}

`git config --global alias.br branch` {{ execute }}

`git config --global alias.ci commit` {{ execute }}

`git config --global alias.st status` {{ execute }}

`git config --global alias.unstage 'reset HEAD --'` {{ execute }}

`git config --global alias.last 'log -1 HEAD'` {{ execute }}

`git config --list` {{ execute }}

#### Git Workflow for Projects

`cd /var/www/myproject` {{ copy }}

`git init` {{ execute }}

`nano .gitignore` {{ execute }}

```gitignore{{ copy }}
# Dependencies
node_modules/
vendor/
venv/
__pycache__/
*.pyc

# Environment files
.env
.env.local
.env.*.local

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE
.idea/
.vscode/
*.swp
*.swo
.DS_Store

# Build outputs
dist/
build/
*.egg-info/
public/hot
public/storage
storage/*.key

# Testing
coverage/
.nyc_output/
.pytest_cache/
htmlcov/

# Database
*.sqlite
*.db
```

`git add .` {{ execute }}

`git commit -m "Initial commit"` {{ execute }}

`git checkout -b develop` {{ execute }}

`git checkout -b feature/new-feature` {{ execute }}

`Work on feature...` {{ info }}

`git add .` {{ execute }}

`git commit -m "Add new feature"` {{ execute }}

`git checkout develop` {{ execute }}

`git merge feature/new-feature` {{ execute }}

`git branch -d feature/new-feature` {{ execute }}

### Port Forwarding for Development

#### SSH Port Forwarding

`ssh -L 8080:localhost:3000 user@remote-server` {{ copy }}

`ssh -R 8080:localhost:3000 user@remote-server` {{ copy }}

`ssh -D 9090 user@remote-server` {{ copy }}

`ssh -L 8080:localhost:80 -L 3306:localhost:3306 -L 6379:localhost:6379 user@remote-server` {{ copy }}

`nano ~/.ssh/config` {{ copy }}

```{{ copy }}
Host dev-server
    HostName server.example.com
    User developer
    Port 22
    LocalForward 8080 localhost:80
    LocalForward 3306 localhost:3306
    LocalForward 5432 localhost:5432
    LocalForward 6379 localhost:6379
    ServerAliveInterval 60
    ServerAliveCountMax 3
```

`ssh dev-server` {{ execute }}

---

## Practice Exercises

### Exercise 1: Deploy Multi-Language Application
1. Set up a Python Flask API
2. Create a Node.js frontend application
3. Configure PHP admin panel
4. Set up Nginx to route to all three applications
5. Implement proper logging and monitoring

### Exercise 2: Development Environment Setup
1. Configure Git with hooks for code quality
2. Set up development and test databases
3. Implement automated testing for an application
4. Configure port forwarding for remote development
5. Create scripts to switch between dev/prod environments

### Exercise 3: Process Management
1. Create systemd services for different applications
2. Implement resource limits using cgroups
3. Set up PM2 for Node.js application
4. Configure automatic restarts on failure
5. Implement health checks and alerts

### Exercise 4: Performance Optimization
1. Configure application caching
2. Optimize application startup time
3. Implement connection pooling for databases
4. Set up load testing with Apache Bench
5. Monitor and optimize resource usage

---

## Quick Reference

### Application Commands
```bash
# Python
python3 -m venv venv          # Create virtual environment
source venv/bin/activate      # Activate venv
pip install -r requirements.txt # Install dependencies
gunicorn app:app              # Start WSGI server

# Node.js
npm install                    # Install dependencies
npm run dev                    # Development mode
npm run build                  # Build for production
pm2 start app.js              # Start with PM2

# PHP
composer install              # Install dependencies
php artisan serve            # Development server
php-fpm                      # Start PHP-FPM
```

### Process Management
```bash
# Systemd
systemctl start app           # Start service
systemctl stop app            # Stop service
systemctl restart app         # Restart service
systemctl status app          # Check status
journalctl -u app -f          # View logs

# PM2
pm2 start app.js             # Start application
pm2 list                     # List processes
pm2 logs app                 # View logs
pm2 restart app              # Restart
pm2 save                     # Save configuration
```

### Development Tools
```bash
# Git
git status                    # Check status
git add .                     # Stage changes
git commit -m "message"       # Commit
git push origin branch        # Push to remote
git pull                      # Pull changes

# Testing
pytest                        # Run Python tests
npm test                      # Run Node tests
phpunit                       # Run PHP tests

# Database
mysql -u user -p              # Connect to MySQL
psql -U user -d database      # Connect to PostgreSQL
redis-cli                     # Connect to Redis
```

---

## Additional Resources

### Language-Specific Resources
- [Python Deployment Guide](https://docs.python-guide.org/shipping/deployment/)
- [Node.js Best Practices](https://github.com/goldbergyoni/nodebestpractices)
- [PHP: The Right Way](https://phptherightway.com/)
- [12 Factor App](https://12factor.net/)

### Process Management
- [Systemd Documentation](https://www.freedesktop.org/software/systemd/man/)
- [PM2 Documentation](https://pm2.keymetrics.io/docs/)
- [Supervisor Documentation](http://supervisord.org/)

### Development Tools
- [Git Documentation](https://git-scm.com/doc)
- [Docker for Development](https://docs.docker.com/develop/)
- [VS Code Remote Development](https://code.visualstudio.com/docs/remote/remote-overview)

### Performance and Monitoring
- [Application Performance Monitoring](https://www.datadoghq.com/knowledge-center/apm/)
- [New Relic Documentation](https://docs.newrelic.com/)
- [Prometheus Application Monitoring](https://prometheus.io/docs/guides/go-application/)

### Next Steps
After completing this section, you should:
- Be able to deploy applications in Python, Node.js, and PHP
- Understand process management and resource isolation
- Know how to set up development environments
- Be able to implement monitoring and health checks
- Have a complete development workflow configured

Continue to Part 10 to learn about troubleshooting and recovery procedures.
