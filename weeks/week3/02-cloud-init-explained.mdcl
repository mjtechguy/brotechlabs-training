# Cloud-Init Explained: Automating Server Initialization

## What is Cloud-Init?

**Cloud-Init** is an industry-standard tool for automating the initialization of cloud servers. It runs automatically the first time a server boots and handles all the initial setup tasks you would normally do manually.

Think of cloud-init as a "setup wizard" that runs without any human interaction. You give it a configuration file (written in YAML format), and it executes all the setup steps automatically when the server first starts.

### Why is it Called "Cloud-Init"?

- **Cloud** = It was designed for cloud platforms (AWS, Google Cloud, Azure, Hetzner, etc.)
- **Init** = Short for "initialization" - it initializes (sets up) your server

### Where is Cloud-Init Used?

Almost every major cloud platform supports cloud-init:
- Amazon Web Services (AWS EC2)
- Google Cloud Platform (GCP)
- Microsoft Azure
- Hetzner Cloud
- DigitalOcean
- Linode
- Oracle Cloud
- And many more!

This means the skills you learn here work across virtually all cloud providers.

## How Cloud-Init Works

### The Lifecycle

```
┌──────────────────────┐
│  Create Server       │
│  with Cloud-Init     │
│  Configuration       │
└──────────┬───────────┘
           │
           ↓
┌──────────────────────┐
│  Server Boots        │
│  for First Time      │
└──────────┬───────────┘
           │
           ↓
┌──────────────────────┐
│  Cloud-Init Runs     │
│  Automatically       │
│  (One Time Only)     │
└──────────┬───────────┘
           │
           ↓
┌──────────────────────┐
│  Execute All Tasks:  │
│  • Update packages   │
│  • Install software  │
│  • Create users      │
│  • Configure firewall│
│  • Set up SSH        │
│  • Run custom scripts│
└──────────┬───────────┘
           │
           ↓
┌──────────────────────┐
│  Server Ready!       │
│  Cloud-Init Done     │
│  (Won't run again)   │
└──────────────────────┘
```

### Key Points

1. **Runs Once**: Cloud-init only runs during the first boot after server creation
2. **Automatic**: No human interaction needed
3. **Configuration-Driven**: You write a YAML config file describing what you want
4. **Idempotent**: Safe to run (though it only runs once anyway)

## YAML Basics

Cloud-init uses **YAML** (YAML Ain't Markup Language) for its configuration files. YAML is designed to be human-readable and easy to write.

### YAML Fundamentals

**Key-Value Pairs:**
```yaml
# Format: key: value
name: admin
timezone: America/New_York
enabled: true
```

**Lists:**
```yaml
# Format: key, then items with dashes
packages:
  - docker.io
  - git
  - curl
```

**Nested Structure:**
```yaml
# Indentation shows hierarchy (use spaces, NOT tabs!)
users:
  - name: admin
    groups: sudo
    shell: /bin/bash
```

**Comments:**
```yaml
# Lines starting with # are comments
# They're ignored by the computer but help humans understand

packages:
  - docker.io  # Container platform
  - git        # Version control
```

### YAML Rules

1. **Use spaces for indentation**, never tabs (usually 2 or 4 spaces)
2. **Indentation matters** - it shows structure/hierarchy
3. **Colons** separate keys from values (key: value)
4. **Dashes** indicate list items
5. **Case sensitive** - "Name" and "name" are different

## Cloud-Init Configuration Structure

A complete cloud-init file starts with `#cloud-config` and contains several sections:

```yaml
#cloud-config
# This MUST be the first line!

# Package management
package_update: true
package_upgrade: true

# Packages to install
packages:
  - package1
  - package2

# Users to create
users:
  - name: username
    groups: sudo
    # ... more user config

# Files to create
write_files:
  - path: /path/to/file
    content: |
      File contents here

# Commands to run
runcmd:
  - command1
  - command2
```

## Cloud-Init Sections Explained

### 1. Package Management

```yaml
#cloud-config

# Update package lists (like running: apt update)
package_update: true

# Upgrade installed packages (like running: apt upgrade -y)
package_upgrade: true

# Reboot if kernel was updated
package_reboot_if_required: true
```

**What this does:**
- Updates the list of available packages
- Upgrades installed packages to latest versions
- Reboots if a kernel update requires it

**Why it matters:**
- Security: Get latest security patches
- Compatibility: Ensure packages work together
- Stability: Fix known bugs

### 2. Installing Packages

```yaml
packages:
  # Each line is a package to install
  - docker.io           # Docker container platform
  - docker-compose      # Multi-container Docker apps
  - git                 # Version control
  - curl                # Download files
  - ufw                 # Firewall
  - htop                # System monitor
  - fail2ban            # Security (blocks brute-force)
```

**What this does:**
- Installs each listed package automatically
- Equivalent to running: `apt install -y package-name` for each one

**Why it matters:**
- Saves time (no manual installation)
- Ensures consistency (same packages every time)
- Documents what's installed

### 3. Timezone Configuration

```yaml
# Set server timezone
timezone: America/New_York
```

**Common timezones:**
- `America/New_York` - Eastern Time
- `America/Chicago` - Central Time
- `America/Denver` - Mountain Time
- `America/Los_Angeles` - Pacific Time
- `UTC` - Coordinated Universal Time
- `Europe/London` - GMT/BST

[Full list of timezones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)

### 4. User Creation

```yaml
users:
  - name: admin                    # Username
    groups: sudo, docker           # Groups (permissions)
    shell: /bin/bash              # Default shell
    sudo: 'ALL=(ALL) NOPASSWD:ALL' # Sudo without password

    # SSH keys for authentication
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI... your-email@example.com
```

**Breaking this down:**

**name:** The username you'll use to log in

**groups:**
- `sudo` = Can run administrative commands
- `docker` = Can use Docker without sudo

**shell:**
- `/bin/bash` = Use Bash shell (most common)
- `/bin/zsh` = Alternative: Zsh shell

**sudo:**
- `ALL=(ALL) NOPASSWD:ALL` = Can run any sudo command without entering password
- Convenient but less secure (use with caution)

**ssh_authorized_keys:**
- Your public SSH key(s)
- Get yours with: `cat ~/.ssh/id_ed25519.pub`
- Allows you to log in without a password (more secure than passwords!)

### 5. SSH and Security Settings

```yaml
# Disable root user login (security best practice)
disable_root: false    # Keep root enabled for emergency access

# Disable password authentication (use SSH keys only)
ssh_pwauth: false     # More secure!
```

**Why disable password authentication?**
- SSH keys are much more secure than passwords
- Prevents brute-force password attacks
- Passwords can be guessed; SSH keys (with 256+ bits) cannot

### 6. Writing Files

```yaml
write_files:
  # Create Docker configuration
  - path: /etc/docker/daemon.json
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        }
      }
    permissions: '0644'  # rw-r--r-- (readable by all, writable by owner)
    owner: root:root     # Owned by root user and group
```

**Breaking this down:**

**path:** Where to create the file

**content: |**
- The pipe symbol `|` means "multi-line content follows"
- Everything indented after this is file content

**permissions:**
- `0644` = rw-r--r--
  - Owner (root): read + write
  - Group: read only
  - Others: read only

**owner:**
- Format: `username:groupname`
- Usually `root:root` for system files

### 7. Running Commands (runcmd)

This is where you run shell commands to configure the system:

```yaml
runcmd:
  # Start and enable Docker
  - systemctl start docker
  - systemctl enable docker

  # Configure firewall
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow 22/tcp comment 'SSH'
  - ufw allow 80/tcp comment 'HTTP'
  - ufw allow 443/tcp comment 'HTTPS'
  - ufw --force enable

  # Create directories
  - mkdir -p /opt/apps
  - chown admin:admin /opt/apps
```

**Important notes:**

**Order matters:** Commands run top to bottom

**systemctl:**
- `start` = Start service now
- `enable` = Start service on every boot
- `restart` = Restart a running service

**ufw (Uncomplicated Firewall):**
- `default deny incoming` = Block all incoming traffic by default
- `default allow outgoing` = Allow all outgoing traffic
- `allow 22/tcp` = Allow SSH connections
- `--force enable` = Enable without confirmation prompt

**mkdir -p:**
- Creates directory and any needed parent directories
- `-p` = "parents" and "don't error if exists"

**chown:**
- Changes file ownership
- Format: `chown user:group /path`

## Complete Example with Annotations

Let's look at a complete cloud-init configuration with detailed explanations:

```yaml
#cloud-config
# ============================================================================
# This MUST be the first line - it tells cloud-init this is a config file
# ============================================================================

# ----------------------------------------------------------------------------
# PACKAGE MANAGEMENT
# ----------------------------------------------------------------------------
# Update package database and upgrade installed packages
package_update: true      # apt update
package_upgrade: true     # apt upgrade -y
package_reboot_if_required: true  # Reboot if kernel updated

# ----------------------------------------------------------------------------
# PACKAGE INSTALLATION
# ----------------------------------------------------------------------------
# Install required packages automatically
packages:
  # Transport and security
  - apt-transport-https    # Allow HTTPS package sources
  - ca-certificates        # SSL certificate verification

  # Basic utilities
  - curl                   # Transfer data from URLs
  - wget                   # Download files
  - git                    # Version control
  - vim                    # Text editor

  # Docker
  - docker.io             # Container platform
  - docker-compose        # Multi-container orchestration

  # Monitoring
  - htop                  # Interactive process viewer
  - ncdu                  # Disk usage analyzer

  # Security
  - ufw                   # Firewall
  - fail2ban             # Brute-force protection

# ----------------------------------------------------------------------------
# TIMEZONE
# ----------------------------------------------------------------------------
timezone: America/New_York

# ----------------------------------------------------------------------------
# USER CREATION
# ----------------------------------------------------------------------------
users:
  - name: admin

    # Groups determine permissions
    # sudo = can run administrative commands
    # docker = can use Docker without sudo
    groups: sudo, docker

    # Default shell (command line interface)
    shell: /bin/bash

    # Allow sudo without password (convenient but less secure)
    sudo: 'ALL=(ALL) NOPASSWD:ALL'

    # SSH public keys for authentication
    # Get your key with: cat ~/.ssh/id_ed25519.pub
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGr8... your-email@example.com

# ----------------------------------------------------------------------------
# SSH SECURITY
# ----------------------------------------------------------------------------
disable_root: false    # Keep root enabled for recovery
ssh_pwauth: false     # Disable password login (SSH keys only!)

# ----------------------------------------------------------------------------
# CREATE FILES
# ----------------------------------------------------------------------------
write_files:
  # Docker logging configuration
  # Prevents log files from growing infinitely
  - path: /etc/docker/daemon.json
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2"
      }
    permissions: '0644'
    owner: root:root

# ----------------------------------------------------------------------------
# RUN COMMANDS
# ----------------------------------------------------------------------------
# These run in order after all other steps complete
runcmd:
  # --- Docker Setup ---
  - systemctl start docker       # Start Docker now
  - systemctl enable docker      # Start Docker on every boot
  - usermod -aG docker admin    # Add admin to docker group
  - docker network create web_network || true  # Create network (|| true means don't fail if exists)

  # --- Firewall Setup ---
  - ufw default deny incoming    # Block all incoming by default
  - ufw default allow outgoing   # Allow all outgoing
  - ufw allow 22/tcp comment 'SSH'       # Allow SSH (port 22)
  - ufw allow 80/tcp comment 'HTTP'      # Allow HTTP (port 80)
  - ufw allow 443/tcp comment 'HTTPS'    # Allow HTTPS (port 443)
  - ufw allow 81/tcp comment 'NPM Admin' # Allow NPM web UI (port 81)
  - ufw --force enable           # Enable firewall (--force skips confirmation)

  # --- Fail2ban Setup ---
  - systemctl enable fail2ban    # Start on boot
  - systemctl start fail2ban     # Start now

  # --- Create Directory Structure ---
  - mkdir -p /opt/nginx-proxy-manager
  - mkdir -p /opt/code-server
  - mkdir -p /opt/docker-volumes
  - mkdir -p /opt/scripts

  # Change ownership to admin user
  - chown -R admin:admin /opt/nginx-proxy-manager
  - chown -R admin:admin /opt/code-server
  - chown -R admin:admin /opt/docker-volumes
  - chown -R admin:admin /opt/scripts

  # --- System Optimizations ---
  # Increase file watchers (useful for development tools)
  - echo "fs.inotify.max_user_watches=524288" >> /etc/sysctl.conf
  - sysctl -p

  # --- Logging ---
  - echo "Cloud-init completed at $(date)" > /var/log/cloud-init-complete.log
  - docker --version >> /var/log/cloud-init-complete.log
  - hostname -I >> /var/log/cloud-init-complete.log

# ----------------------------------------------------------------------------
# FINAL MESSAGE
# ----------------------------------------------------------------------------
# Displayed when cloud-init completes
final_message: |
  ============================================================================
  Server initialization complete!
  ============================================================================
  System is ready for application deployment.

  Next steps:
  1. SSH in as 'admin' user
  2. Run application deployment scripts
  3. Configure DNS records

  Check logs: /var/log/cloud-init-output.log
  ============================================================================
```

## Understanding the Execution Flow

When cloud-init runs, it executes sections in this order:

```
1. Set locale, hostname, timezone
2. Update package lists (package_update)
3. Upgrade packages (package_upgrade)
4. Install packages (packages)
5. Create users (users)
6. Configure SSH (disable_root, ssh_pwauth)
7. Write files (write_files)
8. Run commands (runcmd)
9. Reboot if needed (package_reboot_if_required)
10. Display final message (final_message)
```

## Common Cloud-Init Patterns

### Pattern 1: Adding Multiple SSH Keys

```yaml
users:
  - name: admin
    groups: sudo, docker
    shell: /bin/bash
    sudo: 'ALL=(ALL) NOPASSWD:ALL'
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3... first-key@example.com
      - ssh-rsa AAAAB3... second-key@example.com
      - ssh-ed25519 AAAAC3... third-key@example.com
```

### Pattern 2: Importing Keys from GitHub

```yaml
users:
  - name: admin
    groups: sudo, docker
    shell: /bin/bash
    sudo: 'ALL=(ALL) NOPASSWD:ALL'
    ssh_import_id:
      - gh:your-github-username  # Imports all your GitHub SSH keys!
```

### Pattern 3: Creating Multiple Users

```yaml
users:
  - name: admin
    groups: sudo, docker
    shell: /bin/bash
    sudo: 'ALL=(ALL) NOPASSWD:ALL'
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3... admin@example.com

  - name: developer
    groups: docker           # No sudo access
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3... dev@example.com
```

### Pattern 4: Installing Docker Compose Plugin

```yaml
runcmd:
  # Install Docker Compose as a plugin (modern method)
  - apt-get update
  - apt-get install -y docker-compose-plugin

  # Verify installation
  - docker compose version
```

### Pattern 5: Downloading and Running Scripts

```yaml
runcmd:
  # Download a script from GitHub
  - curl -fsSL https://github.com/user/repo/raw/main/setup.sh -o /tmp/setup.sh

  # Make it executable
  - chmod +x /tmp/setup.sh

  # Run it
  - bash /tmp/setup.sh
```

## Checking Cloud-Init Status

After your server boots, you can check if cloud-init is done:

```bash
# Wait for cloud-init to finish (blocks until complete)
cloud-init status --wait

# Check if it succeeded
cloud-init status

# View detailed logs
cat /var/log/cloud-init-output.log

# View any errors
grep -i error /var/log/cloud-init-output.log
```

## Troubleshooting Cloud-Init

### Problem: Cloud-Init Didn't Run

**Check:**
```bash
# Did cloud-init run at all?
cloud-init status

# If it says "not run", check if disabled
systemctl status cloud-init
```

**Solution:**
- Make sure `#cloud-config` is the first line
- Verify YAML syntax (use https://www.yamllint.com/)
- Check cloud provider actually supports cloud-init

### Problem: Packages Didn't Install

**Check:**
```bash
# View package installation logs
grep "apt" /var/log/cloud-init-output.log

# Try installing manually
sudo apt update
sudo apt install package-name
```

**Common causes:**
- Package name misspelled
- Package not available in Ubuntu repositories
- Network issues during installation

### Problem: SSH Keys Don't Work

**Check:**
```bash
# View authorized keys file
sudo cat /home/admin/.ssh/authorized_keys

# Check file permissions
ls -la /home/admin/.ssh/
```

**Should see:**
```
drwx------ admin admin .ssh/
-rw------- admin admin .ssh/authorized_keys
```

**Fix permissions if needed:**
```bash
sudo chmod 700 /home/admin/.ssh
sudo chmod 600 /home/admin/.ssh/authorized_keys
sudo chown -R admin:admin /home/admin/.ssh
```

### Problem: Commands in runcmd Failed

**Check:**
```bash
# View runcmd output
grep "runcmd" /var/log/cloud-init-output.log -A 50

# Look for error messages
grep -i "error\|fail" /var/log/cloud-init-output.log
```

**Common causes:**
- Command depends on previous command that failed
- Typo in command
- Service not ready yet (add `sleep 5` before command)

### Problem: YAML Syntax Error

**Symptoms:**
- Cloud-init doesn't run
- Error in logs about "YAML parse error"

**Solution:**
1. Copy your cloud-config to https://www.yamllint.com/
2. Fix reported errors
3. Common issues:
   - Used tabs instead of spaces
   - Inconsistent indentation
   - Missing colon after key
   - Missing dash for list item

## Best Practices

### 1. Test in Stages

Don't write a huge cloud-config all at once. Build incrementally:

**Stage 1:** Basic packages and user
```yaml
#cloud-config
package_update: true
packages:
  - curl
  - git
users:
  - name: admin
    groups: sudo
    ssh_authorized_keys:
      - ssh-ed25519 ...
```

**Stage 2:** Add Docker
```yaml
packages:
  - curl
  - git
  - docker.io
runcmd:
  - systemctl enable docker
  - systemctl start docker
```

**Stage 3:** Add firewall, etc.

### 2. Use Comments Extensively

```yaml
# Bad - no explanation
packages:
  - docker.io
  - ufw

# Good - explains why
packages:
  - docker.io  # Container platform for applications
  - ufw        # Firewall to secure the server
```

### 3. Make Commands Idempotent

Use `|| true` for commands that might fail if already done:

```yaml
runcmd:
  # Won't fail if network already exists
  - docker network create web_network || true

  # Won't fail if already added to group
  - usermod -aG docker admin || true
```

### 4. Log Everything Important

```yaml
runcmd:
  - echo "Starting Docker setup..." >> /var/log/my-setup.log
  - systemctl start docker 2>&1 >> /var/log/my-setup.log
  - echo "Docker setup complete" >> /var/log/my-setup.log
```

### 5. Separate Concerns

**Cloud-init should handle:**
- ✅ OS-level configuration
- ✅ Installing software
- ✅ Creating users
- ✅ Firewall rules
- ✅ One-time setup

**Cloud-init should NOT handle:**
- ❌ Deploying applications (use bash scripts)
- ❌ Complex multi-step logic (use bash scripts)
- ❌ Things that need updating later (use bash scripts)

## Real-World Example: BroTech Labs Server

Here's what we use for BroTech Labs training servers:

```yaml
#cloud-config
package_update: true
package_upgrade: true
package_reboot_if_required: true

packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - docker.io
  - docker-compose
  - docker-buildx
  - htop
  - ncdu
  - tree
  - jq
  - ufw
  - fail2ban
  - git
  - vim

timezone: America/New_York

users:
  - name: admin
    groups: sudo, docker
    shell: /bin/bash
    sudo: 'ALL=(ALL) NOPASSWD:ALL'
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI... brotech@admin

disable_root: false
ssh_pwauth: false

write_files:
  - path: /etc/docker/daemon.json
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2"
      }
    permissions: '0644'
    owner: root:root

runcmd:
  - systemctl start docker
  - systemctl enable docker
  - usermod -aG docker admin || true
  - docker network create web_network || true

  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow 22/tcp comment 'SSH'
  - ufw allow 80/tcp comment 'HTTP'
  - ufw allow 443/tcp comment 'HTTPS'
  - ufw allow 81/tcp comment 'NPM Admin'
  - ufw --force enable

  - systemctl enable fail2ban
  - systemctl start fail2ban

  - mkdir -p /opt/nginx-proxy-manager
  - mkdir -p /opt/code-server
  - mkdir -p /opt/docker-volumes
  - mkdir -p /opt/scripts

  - chown -R admin:admin /opt/nginx-proxy-manager
  - chown -R admin:admin /opt/code-server
  - chown -R admin:admin /opt/docker-volumes
  - chown -R admin:admin /opt/scripts

  - echo "fs.inotify.max_user_watches=524288" >> /etc/sysctl.conf
  - sysctl -p

  - echo "Cloud-init completed at $(date)" > /var/log/cloud-init-complete.log
  - docker --version >> /var/log/cloud-init-complete.log
  - hostname -I >> /var/log/cloud-init-complete.log

final_message: |
  Server initialization complete! Ready for deployment.
```

## Hands-On Practice

### Exercise 1: Basic Cloud-Init

Create a cloud-init config that:
1. Updates packages
2. Installs `curl`, `git`, and `htop`
3. Creates a user named "student"
4. Sets timezone to your local timezone

<details>
<summary>Solution</summary>

```yaml
#cloud-config
package_update: true
package_upgrade: true

packages:
  - curl
  - git
  - htop

timezone: America/New_York  # Change to your timezone

users:
  - name: student
    groups: sudo
    shell: /bin/bash
    sudo: 'ALL=(ALL) NOPASSWD:ALL'
    ssh_authorized_keys:
      - ssh-ed25519 YOUR_KEY_HERE
```
</details>

### Exercise 2: Docker Setup

Extend Exercise 1 to:
1. Install Docker
2. Start and enable Docker
3. Create a Docker network called "app_network"

<details>
<summary>Solution</summary>

```yaml
#cloud-config
package_update: true
package_upgrade: true

packages:
  - curl
  - git
  - htop
  - docker.io
  - docker-compose

timezone: America/New_York

users:
  - name: student
    groups: sudo, docker
    shell: /bin/bash
    sudo: 'ALL=(ALL) NOPASSWD:ALL'
    ssh_authorized_keys:
      - ssh-ed25519 YOUR_KEY_HERE

runcmd:
  - systemctl start docker
  - systemctl enable docker
  - docker network create app_network || true
```
</details>

### Exercise 3: Full Server Setup

Create a complete cloud-init config that:
1. Updates and upgrades packages
2. Installs Docker, firewall, and monitoring tools
3. Creates an admin user with your SSH key
4. Configures firewall to allow SSH, HTTP, HTTPS
5. Creates directories: `/opt/apps` and `/opt/config`
6. Logs completion to `/var/log/setup-complete.log`

<details>
<summary>Solution</summary>

```yaml
#cloud-config
package_update: true
package_upgrade: true
package_reboot_if_required: true

packages:
  - curl
  - git
  - docker.io
  - docker-compose
  - ufw
  - htop
  - ncdu

timezone: America/New_York

users:
  - name: admin
    groups: sudo, docker
    shell: /bin/bash
    sudo: 'ALL=(ALL) NOPASSWD:ALL'
    ssh_authorized_keys:
      - ssh-ed25519 YOUR_KEY_HERE

disable_root: false
ssh_pwauth: false

runcmd:
  - systemctl start docker
  - systemctl enable docker
  - usermod -aG docker admin || true

  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow 22/tcp comment 'SSH'
  - ufw allow 80/tcp comment 'HTTP'
  - ufw allow 443/tcp comment 'HTTPS'
  - ufw --force enable

  - mkdir -p /opt/apps
  - mkdir -p /opt/config
  - chown -R admin:admin /opt/apps
  - chown -R admin:admin /opt/config

  - echo "Setup completed at $(date)" > /var/log/setup-complete.log
  - docker --version >> /var/log/setup-complete.log

final_message: |
  Server is ready!
  Check: /var/log/setup-complete.log
```
</details>

## Summary

Cloud-init is your secret weapon for automated server initialization. It:

✅ Runs automatically on first boot
✅ Handles OS-level configuration
✅ Works across all major cloud providers
✅ Uses simple YAML configuration
✅ Eliminates manual setup steps
✅ Ensures consistency across servers

**Key Takeaways:**

1. **#cloud-config** must be the first line
2. **YAML syntax** matters - use spaces, not tabs
3. **Order of execution** is predictable
4. **Idempotent commands** with `|| true`
5. **Separate concerns** - cloud-init for OS, bash scripts for apps
6. **Test incrementally** - don't write everything at once
7. **Check logs** in `/var/log/cloud-init-output.log`

**What's Next:**

Now that you understand cloud-init for server initialization, let's learn bash scripting for application deployment!

---

**Next:** [03 - Bash Scripting Deep Dive](./03-bash-scripting-deep-dive.mdcl)
