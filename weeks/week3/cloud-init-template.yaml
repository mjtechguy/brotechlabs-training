#cloud-config
# ============================================================================
# Cloud-Init Configuration for BroTech Labs Week 3
# ============================================================================
# This file automates the initial server setup for our infrastructure.
# It runs ONCE when the server first boots.
#
# What this does:
# 1. Updates all system packages
# 2. Installs Docker and required tools
# 3. Creates an admin user with SSH access
# 4. Configures the firewall (UFW)
# 5. Sets up Docker networking
# 6. Prepares directories for applications
#
# Usage: Paste this into Hetzner's "Cloud config" field when creating a server
# ============================================================================

# Tell system to update and upgrade packages at first boot
# This is like running: sudo apt update && sudo apt upgrade -y
package_update: true
package_upgrade: true

# If a reboot is required after updates, do it automatically
package_reboot_if_required: true

# ============================================================================
# PACKAGES TO INSTALL
# ============================================================================
# Each package listed here will be installed automatically
# This saves you from having to run multiple "apt install" commands
packages:
  # Transport packages (required for HTTPS repositories)
  - apt-transport-https    # Allows apt to fetch packages over HTTPS
  - ca-certificates        # Common SSL certificates for secure connections

  # Core utilities
  - curl                   # Download files from URLs
  - wget                   # Alternative download tool
  - gnupg                  # GNU Privacy Guard (for package verification)
  - lsb-release           # Linux Standard Base release info
  - software-properties-common  # Manage software repositories

  # Docker and container tools
  - docker.io             # Docker container runtime
  - docker-compose        # Tool to run multi-container Docker apps
  - docker-buildx         # Enhanced Docker build capabilities

  # System monitoring and management
  - htop                  # Interactive process viewer (better than top)
  - ncdu                  # Disk usage analyzer (NCurses Disk Usage)
  - tree                  # Display directory tree structure
  - jq                    # JSON processor (useful for Docker/API work)

  # Security tools
  - ufw                   # Uncomplicated Firewall (easy firewall management)
  - fail2ban             # Protects against brute-force attacks

  # Development and debugging
  - git                   # Version control system
  - vim                   # Text editor (improved vi)
  - nano                  # Simple text editor
  - net-tools            # Network tools (ifconfig, netstat, etc.)

# ============================================================================
# TIMEZONE CONFIGURATION
# ============================================================================
# Set the system timezone - change this to your timezone!
# Find your timezone: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
timezone: America/New_York

# ============================================================================
# USER CREATION
# ============================================================================
# Create administrative user(s) for SSH access
# IMPORTANT: Replace the SSH key with YOUR public key!
# Generate one with: ssh-keygen -t ed25519 -C "your_email@example.com"
users:
  - name: admin                    # Username for SSH login
    groups: sudo, docker           # Add to sudo group (admin) and docker group
    shell: /bin/bash              # Use bash as the default shell
    sudo: 'ALL=(ALL) NOPASSWD:ALL'  # Allow sudo without password

    # SSH PUBLIC KEYS - ADD YOURS HERE!
    # Get your public key with: cat ~/.ssh/id_ed25519.pub
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI... your-key-here@example.com
      # You can add multiple keys (one per line with a dash)
      # - ssh-ed25519 AAAAC3Nz... second-key@example.com

    # Optional: Import SSH keys from GitHub
    # Uncomment and add your GitHub username:
    # ssh_import_id:
    #   - gh:your-github-username

# ============================================================================
# DISABLE ROOT PASSWORD LOGIN
# ============================================================================
# Security best practice: disable root password login, use SSH keys only
disable_root: false  # Keep root enabled for recovery, but...
ssh_pwauth: false    # ...disable password authentication (SSH keys only!)

# ============================================================================
# WRITE FILES
# ============================================================================
# Create files on the system with specific content
write_files:
  # Docker daemon configuration
  # This configures Docker's logging to prevent log files from growing too large
  - path: /etc/docker/daemon.json
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2"
      }
    permissions: '0644'  # rw-r--r-- (readable by all, writable by owner)
    owner: root:root

  # Create directory structure for our applications
  # This creates a marker file; directories created in runcmd
  - path: /root/.cloud-init-marker
    content: |
      Cloud-init configuration applied successfully
      Timestamp: $(date)
    permissions: '0644'

# ============================================================================
# RUN COMMANDS (Runs after all other steps)
# ============================================================================
# These commands run in order after packages are installed and files are written
# Think of this as a bash script that runs once
runcmd:
  # -------------------------------------------------------------------------
  # DOCKER CONFIGURATION
  # -------------------------------------------------------------------------
  # Start Docker service immediately
  - systemctl start docker

  # Enable Docker to start automatically on boot
  - systemctl enable docker

  # Add admin user to docker group (if not already done by users section)
  - usermod -aG docker admin || true

  # Create a custom Docker network for our applications
  # This allows containers to communicate using their names
  # || true means "don't fail if this already exists"
  - docker network create web_network || true

  # -------------------------------------------------------------------------
  # FIREWALL CONFIGURATION (UFW)
  # -------------------------------------------------------------------------
  # UFW = Uncomplicated Firewall - Ubuntu's friendly firewall interface

  # Set default policies
  - ufw default deny incoming    # Block all incoming traffic by default
  - ufw default allow outgoing   # Allow all outgoing traffic

  # Allow specific services (open ports)
  - ufw allow 22/tcp comment 'SSH'              # SSH (remote access)
  - ufw allow 80/tcp comment 'HTTP'             # HTTP (web traffic)
  - ufw allow 443/tcp comment 'HTTPS'           # HTTPS (secure web)
  - ufw allow 81/tcp comment 'NPM Admin'        # Nginx Proxy Manager UI

  # Enable the firewall (--force skips confirmation prompt)
  - ufw --force enable

  # -------------------------------------------------------------------------
  # FAIL2BAN CONFIGURATION
  # -------------------------------------------------------------------------
  # Fail2ban protects against brute-force attacks
  - systemctl enable fail2ban    # Enable on boot
  - systemctl start fail2ban     # Start now

  # -------------------------------------------------------------------------
  # CREATE DIRECTORY STRUCTURE
  # -------------------------------------------------------------------------
  # Create directories for our applications
  # -p flag creates parent directories if needed
  - mkdir -p /opt/nginx-proxy-manager
  - mkdir -p /opt/code-server
  - mkdir -p /opt/docker-volumes
  - mkdir -p /opt/scripts

  # Set proper ownership (admin user should own these)
  - chown -R admin:admin /opt/nginx-proxy-manager
  - chown -R admin:admin /opt/code-server
  - chown -R admin:admin /opt/docker-volumes
  - chown -R admin:admin /opt/scripts

  # -------------------------------------------------------------------------
  # SYSTEM OPTIMIZATIONS
  # -------------------------------------------------------------------------
  # Increase file watcher limit (useful for development tools)
  - echo "fs.inotify.max_user_watches=524288" >> /etc/sysctl.conf
  - sysctl -p

  # Update locate database (for fast file searches)
  - updatedb || true

  # -------------------------------------------------------------------------
  # LOGGING
  # -------------------------------------------------------------------------
  # Create a log file to track cloud-init completion
  - echo "Cloud-init setup completed successfully at $(date)" > /var/log/cloud-init-complete.log
  - echo "Server is ready for application deployment!" >> /var/log/cloud-init-complete.log

  # Log installed Docker version
  - docker --version >> /var/log/cloud-init-complete.log

  # Log network info
  - echo "IP Address:" >> /var/log/cloud-init-complete.log
  - hostname -I >> /var/log/cloud-init-complete.log

# ============================================================================
# FINAL MESSAGE
# ============================================================================
# This message is displayed in /var/log/cloud-init-output.log
# $UPTIME is replaced with actual system uptime
# $TIMESTAMP is replaced with current date/time
final_message: |
  ============================================================================
  Cloud-init setup completed successfully!
  ============================================================================
  System uptime: $UPTIME
  Timestamp: $TIMESTAMP

  Docker is installed and running
  Firewall (UFW) is configured and active
  Admin user created with sudo access

  Next steps:
  1. SSH in as 'admin' user
  2. Run the application deployment script
  3. Configure your domain DNS
  4. Deploy Nginx Proxy Manager and Code-Server

  Check logs:
    - Cloud-init: /var/log/cloud-init-output.log
    - Setup log: /var/log/cloud-init-complete.log
  ============================================================================

# ============================================================================
# NOTES AND TROUBLESHOOTING
# ============================================================================
#
# After server boots, SSH in and check cloud-init status:
#   ssh admin@your-server-ip
#   cloud-init status --wait
#   # Should show: status: done
#
# View cloud-init logs:
#   cat /var/log/cloud-init-output.log
#   cat /var/log/cloud-init-complete.log
#
# Verify Docker is running:
#   sudo systemctl status docker
#   docker --version
#   docker network ls
#
# Check firewall status:
#   sudo ufw status verbose
#
# Common issues:
#   - YAML indentation errors: Use spaces, not tabs!
#   - SSH key not working: Make sure you added YOUR public key
#   - Cloud-init still running: Wait a few more minutes, check with:
#     cloud-init status --wait
#
# ============================================================================
